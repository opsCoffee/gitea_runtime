name: Build and Push Docker Images

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
    paths:
      - '.github/workflows/build.yml'
      - 'build.sh'
      - 'test_images.sh'
      - 'runtime-*/**'
  pull_request:
    branches: [ master, main ]
    paths:
      - '.github/workflows/build.yml'
      - 'build.sh'
      - 'test_images.sh'
      - 'runtime-*/**'
  schedule:
    - cron: '0 2 * * 1'

env:
  REGISTRY: git.httpx.online
  REGISTRY_NAMESPACE: kenyon

# Add required permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runtime: [markdown, asustor, template, latex, base]
    outputs:
      image_tag: ${{ steps.get_sha.outputs.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit SHA
        id: get_sha
        run: echo "sha=$(echo ${GITHUB_SHA::7})" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image locally
        id: build_step
        timeout-minutes: ${{ matrix.runtime == 'latex' && 120 || 60 }}
        run: |
          chmod +x ./build.sh
          # 为LaTeX镜像设置更多的Docker构建资源
          if [ "${{ matrix.runtime }}" = "latex" ]; then
            export DOCKER_BUILDKIT=1
            export BUILDX_NO_DEFAULT_ATTESTATIONS=1
          fi
          # 使用单平台构建以便能够加载到本地 Docker daemon
          ./build.sh --only ${{ matrix.runtime }} --tag ${{ steps.get_sha.outputs.sha }} --platforms linux/amd64
          
      - name: Export built image
        run: |
          # 导出镜像为 tar 文件，供后续 job 使用
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
          docker save $IMAGE_NAME:${{ steps.get_sha.outputs.sha }} -o ${{ matrix.runtime }}-image.tar
          
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}-image
          path: ${{ matrix.runtime }}-image.tar
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        runtime: [markdown, asustor, template, latex]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.runtime }}-image
          
      - name: Load Docker image
        run: |
          # 加载之前构建的镜像
          docker load -i ${{ matrix.runtime }}-image.tar
          # 验证镜像已加载
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
          docker images | grep $IMAGE_NAME

      - name: Run tests on local image
        timeout-minutes: 15
        run: |
          chmod +x ./test_images.sh
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
          ./test_images.sh ${{ matrix.runtime }} --image-name $IMAGE_NAME --tag ${{ needs.build.outputs.image_tag }}

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}:${{ needs.build.outputs.image_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "SARIF file found"
            ls -la trivy-results.sarif
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found"
            ls -la
          fi

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check_sarif.outputs.sarif_exists == 'true'
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  push-release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.build.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    strategy:
      matrix:
        runtime: [markdown, asustor, template, latex, base]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image variables
        id: vars
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      # 下载已构建和测试过的镜像
      - name: Download tested image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.runtime }}-image
          
      - name: Push release images with latest and date tags only
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
          DATE_TAG="v${{ steps.vars.outputs.date }}"
          
          if [ "${{ matrix.runtime }}" = "latex" ]; then
            # LaTeX 镜像：只推送 AMD64 版本的 latest 和日期标签
            echo "Processing LaTeX image (AMD64 only)..."
            
            # 加载已测试的 AMD64 镜像
            docker load -i ${{ matrix.runtime }}-image.tar
            
            # 重新标记并推送 latest 和日期标签（不推送原始标签）
            docker tag $IMAGE_NAME:${{ needs.build.outputs.image_tag }} $IMAGE_NAME:latest
            docker tag $IMAGE_NAME:${{ needs.build.outputs.image_tag }} $IMAGE_NAME:$DATE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$DATE_TAG
            
          else
            # 其他镜像：构建并推送多架构版本的 latest 和日期标签
            echo "Processing multi-arch image for ${{ matrix.runtime }}..."
            
            # 使用 buildx 构建完整的多架构镜像（包含 AMD64 + ARM64）
            chmod +x ./build.sh
            
            # 构建并推送多架构镜像的 latest 和日期标签（不推送原始标签）
            docker buildx build \
              --platform "linux/amd64,linux/arm64" \
              --tag "$IMAGE_NAME:latest" \
              --tag "$IMAGE_NAME:$DATE_TAG" \
              --build-arg "GITEA_VERSION=${{ needs.build.outputs.image_tag }}" \
              --build-arg "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
              --push \
              "./runtime-${{ matrix.runtime }}"
          fi
