name: Build and Push Docker Images

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
    paths:
      - '.github/workflows/build.yml'
      - 'build.sh'
      - 'test_images.sh'
      - 'runtime-*/**'
  pull_request:
    branches: [ master, main ]
    paths:
      - '.github/workflows/build.yml'
      - 'build.sh'
      - 'test_images.sh'
      - 'runtime-*/**'
  schedule:
    - cron: '0 2 * * 1'

env:
  REGISTRY: git.httpx.online
  REGISTRY_NAMESPACE: kenyon

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runtime: [markdown, asustor, template, latex, base]
    outputs:
      image_tag: ${{ steps.get_sha.outputs.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit SHA
        id: get_sha
        run: echo "sha=$(echo ${GITHUB_SHA::7})" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push to staging
        id: build_step
        timeout-minutes: 30
        run: |
          chmod +x ./build.sh
          ./build.sh --only ${{ matrix.runtime }} --tag ${{ steps.get_sha.outputs.sha }} --push

  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: needs.build.result == 'success'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       runtime: [markdown, asustor, template, latex]
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Login to Docker Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Run tests on staged image
  #       timeout-minutes: 15
  #       run: |
  #         chmod +x ./test_images.sh
  #         IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
  #         ./test_images.sh ${{ matrix.runtime }} --registry $IMAGE_NAME --tag ${{ needs.build.outputs.image_tag }}

  #     - name: Security scan with Trivy
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: '${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}:${{ needs.build.outputs.image_tag }}'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         severity: 'CRITICAL,HIGH'
  #       continue-on-error: true

  #     - name: Upload Trivy scan results
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  push-release:
    # needs: [build, test]
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.test.result == 'success'
    strategy:
      matrix:
        runtime: [markdown, asustor, template, latex]

    steps:
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image variables
        id: vars
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Pull staged image
        timeout-minutes: 10
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
          docker pull $IMAGE_NAME:${{ steps.vars.outputs.sha }}

      - name: Tag and push 'latest'
        timeout-minutes: 10
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
          docker tag $IMAGE_NAME:${{ steps.vars.outputs.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

      - name: Tag and push date version
        timeout-minutes: 10
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/gitea-runtime-${{ matrix.runtime }}"
          DATE_TAG="v${{ steps.vars.outputs.date }}"
          docker tag $IMAGE_NAME:${{ steps.vars.outputs.sha }} $IMAGE_NAME:$DATE_TAG
          docker push $IMAGE_NAME:$DATE_TAG
